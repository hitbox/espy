# 1. Enter pickle database path, [espy][database].
# 2. Add alert names to [espy][keys] and related sections [espy_alertname].
# 3. Ensure handlers for at least the espy logger.

[espy]
# path to save a pickle of last alerted states to
database =

# alert names separated by whitespace or commas
# if not present here, the alert will not be evaluated
# if alert key is here, but no corresponding section, a key error is raised
keys = alert1

[espy_alert1]
# Alert Expression
# eval-able Python expression returns Truthy to indicate an alert to be logged.
# alert expressions receive namespace:
#   {Path: pathlib.Path, now: time.time(), last: None or time of last alert}
alert =
# EXAMPLES
# 1. Some file's mtime is older than an hour
# alert = now - Path('/path/to/some/file').stat().st_mtime > 60 * 60
# 2. Use last to avoid spamming alerts
#    alert when some file exists and we have not already alerted.
# alert = Path('/some/file').exists() and not last

# Clear Expression
# Return true to clear last alert time. Receives the same context as alert.
clear =

# defaults to WARNING
# level = WARNING

# Logger name, defaults to "espy.<alert name>"
# logger =

# message to send. defaults to the alert expression if not given
# msg =

# Context allows saving values in a namespace dict and pass them to the alert
# and clear expressions.
# context =
# EXAMPLES
# context = dict(logpath = Path('/path/to/log'))

[loggers]
# logging config is required
# it is how alerts get handled.
# an espy logger is required
keys = root, espy

[handlers]
keys = console, email

[formatters]
keys = simple

[logger_root]
level = NOTSET
handlers =

[logger_espy]
level = WARN
#handlers = email
handlers = console
qualname = espy

[handler_console]
class = StreamHandler

[handler_email]
class = handlers.SMTPHandler
# update here
args = ('mailhost', 'fromaddr', 'toaddr', 'subject')

[formatter_simple]
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt = %Y-%m-%d %H:%M:%S
